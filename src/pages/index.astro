---
import Button from "../components/Button.astro";
import Card from "../components/Card.astro";
import Tag from "../components/Tag.astro";
import Layout from "../layouts/Layout.astro";
---

<Layout>
  <canvas
    class="absolute inset-0 rotate-180 -z-10"
    style={{
      backgroundImage:
        "radial-gradient(circle at 50% 0%, hsla(211, 100%, 50%, 0.35), hsla(211, 100%, 50%, 0))",
      "mask-image": "linear-gradient(to top, rgba(0,0,0,1), rgba(0,0,0,0) 50%)",
    }}
    id="grid"></canvas>
  <div class="flex flex-col max-w-[980px] mx-auto">
    <div class="flex flex-row items-center my-12">
      <div class="flex-1">
        <h1
          class="text-4xl font-medium bg-gradient-to-b from-foreground to-[#2069B8] inline-block text-transparent bg-clip-text"
        >
          Jonas Rothmann
        </h1>
        <div class="text-[20px] text-foreground/70 font-light">
          <span>Software Engineer</span>
          <span>{" - "}</span>
          <span>Copenhagen, Denmark</span>
        </div>
      </div>
      <div>
        <Button size="lg">Contact -></Button>
      </div>
    </div>
    <div class="flex flex-col md:grid grid-cols-12 gap-3 grid-auto-rows">
      <Card class="col-span-4" title="LinkedIn">
        <Fragment slot="footer">
          <Button>Connect with me -></Button>
        </Fragment>
      </Card>
      <Card class="col-span-4" title="Resume">
        <Fragment slot="footer">
          <Button variant="outline">Dansk -></Button>
          <Button>English -></Button>
        </Fragment>
      </Card>
      <Card
        class="col-span-4"
        title="Leetcode"
        subtitle="All my leetcode solutions"
      >
        <Fragment slot="tags">
          <Tag>Github</Tag>
        </Fragment>
      </Card>
      <Card
        class="col-span-3"
        title="LoFify"
        type="project"
        subtitle="Turns the audio output of any program into LoFi"
      >
        <Fragment slot="tags">
          <Tag language="c++">C++</Tag>
          <Tag language="swift">Swift</Tag>
          <Tag>Github</Tag>
        </Fragment>
      </Card>
      <Card
        class="col-span-6"
        title="tinymq"
        type="project"
        subtitle="A high-throughput, zero-dependency Go FIFO message queue, accessible via HTTP, TCP and/or in-process."
      >
        <Fragment slot="tags">
          <Tag language="go">Go</Tag>
          <Tag>Github</Tag>
        </Fragment>
      </Card>
      <Card
        class="col-span-3"
        title="tinymq-js"
        type="project"
        subtitle="A javascript client for tinymq"
      >
        <Fragment slot="tags">
          <Tag language="typescript">Typescript</Tag>
          <Tag>Github</Tag>
        </Fragment>
      </Card>
      <Card
        class="col-span-6"
        title="tmdb-anki-generator"
        type="project"
        subtitle="A lightweight tool to generate Anki flashcards for actors and movies using TMDB (The Movie Database) data. This project helps users create personalized flashcards for movie-related study or fun."
      >
        <Fragment slot="tags">
          <Tag language="go">Go</Tag>
          <Tag>Github</Tag>
        </Fragment>
      </Card>
      <Card
        class="col-span-6"
        title="ServiceStyring"
        type="job"
        subtitle="a description..."
      >
        <Fragment slot="tags">
          <Tag language="typescript">Typescript</Tag>
          <Tag language="go">Go</Tag>
          <Tag>Github</Tag>
        </Fragment>
        <Fragment slot="footer">
          <Button>Case Study -></Button>
        </Fragment>
      </Card>
    </div>
  </div>

  <script>
    const canvas = document.getElementById("grid") as HTMLCanvasElement;
    const ctx = canvas.getContext("2d")!;

    function resizeCanvas() {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
    }
    window.addEventListener("resize", resizeCanvas);
    resizeCanvas();

    // --- GRID CONFIG ---
    const lineSpacing = 20;
    const scrollSpeed = -0.7; // Negative to invert the direction
    const focalLength = 500;
    const horizonY = 50; // Move the horizon closer to the top

    let distanceOffset = 0;

    function projectY(distance: any) {
      // As distance increases, lines move toward horizonY
      return (
        horizonY +
        (canvas.height - horizonY) * (focalLength / (distance + focalLength))
      );
    }

    function animate() {
      requestAnimationFrame(animate);
      ctx.clearRect(0, 0, canvas.width, canvas.height);

      ctx.strokeStyle = "#0ff";
      ctx.lineWidth = 0.5;

      const maxDistance = 3000;

      // Draw each "horizontal" line
      for (let i = 0; ; i++) {
        const d = i * lineSpacing + distanceOffset;
        if (d > maxDistance) break;

        const y = projectY(d);
        if (y < horizonY || y > canvas.height) continue;

        ctx.beginPath();
        ctx.moveTo(0, y);
        ctx.lineTo(canvas.width, y);
        ctx.stroke();
      }

      // Update distance offset to make lines move downward
      distanceOffset += scrollSpeed;

      // Wrap around when we cross the lower bound
      if (distanceOffset <= 0) {
        distanceOffset += lineSpacing;
      }
    }

    animate();
  </script>
</Layout>
